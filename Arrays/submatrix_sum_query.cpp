#include<bits/stdc++.h>
using namespace std; 
// top left _> tl bottom right-> br
// submatrix sum query on a matrix ie you are given {(tl_i,tl_j),(br_i,br_j)}
// and each query Q is generated by the sum of given submatrix
// Brute force iterating over row and column to find the sum of given submatrix TC O(n*m)
// Optimised use prefix sum matrix method (formula) 
// to find the to find the sum of given submatrix  TC O(1) only you have to make prefix sum matrix
int main(){
    int n,m,sum,l_i,l_j,b_i,b_j;
    cin>>n>>m>>l_i>>l_j>>b_i>>b_j;
    int a[n][m];
    int c[n][m]={0};
    for(int row = 0; row < n; row++){
        for(int col = 0; col < m; col++){
            cin>>a[row][col];
        }
    }

    for(int i = 0; i < n; i++){ // sum column wise
        for(int j = 0; j < m; j++){
            if(i==0 && j!=0){
                c[i][j]=a[i][j]+c[i][j-1]; // only column addition
            }else if(i!=0 && j==0){
                c[i][j]=a[i][j]+c[i-1][j]; // only row addition
            }else if(i==0 && j==0){
                c[i][j]=a[i][j];
            }else if(i!=0 && j!=0){
                c[i][j]=a[i][j]+c[i-1][j]+(c[i][j-1]-c[i-1][j-1]);
            }
        }
    }
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cout<<c[i][j]<<" ";
        }
        cout<<endl;
    }
    if(l_i==0 && l_j!=0){
        sum=c[b_i][b_j]-c[b_i][l_j-1];
    }else if(l_i!=0 && l_j==0){
        sum=c[b_i][b_j]-c[l_i-1][b_j];
    }else if(l_i==0 && l_j==0){
        sum=c[b_i][b_j];
    }else if(l_i!=0 && l_j!=0){
        sum=c[b_i][b_j]-c[l_i-1][b_j]-c[b_i][l_j-1]+c[l_i-1][l_j-1];
    }
    // sum=c[b_i][b_j]-c[l_i-1][b_j]-c[b_i][l_j-1]+c[l_i-1][l_j-1];
    cout<<"Sum : "<<sum;
    return 0;
}